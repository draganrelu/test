// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fiUhXe8Zsj5ebqGZX94BP2
// Component: w3al5T49Oneev4
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_play_plasmic_levels_start_here.module.css"; // plasmic-import: fiUhXe8Zsj5ebqGZX94BP2/projectcss
import * as sty from "./PlasmicCompletedTask2.module.css"; // plasmic-import: w3al5T49Oneev4/css

export const PlasmicCompletedTask2__VariantProps = new Array();

export const PlasmicCompletedTask2__ArgProps = new Array("children");

function PlasmicCompletedTask2__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        data-plasmic-name={"box"}
        data-plasmic-override={overrides.box}
        className={classNames(defaultcss.all, sty.box)}
      />

      <p.PlasmicSlot
        defaultContents={"Request application extension"}
        value={args.children}
        className={classNames(sty.slotChildren)}
      />
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "box"],
  box: ["box"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCompletedTask2__ArgProps,
      internalVariantPropNames: PlasmicCompletedTask2__VariantProps
    });

    return PlasmicCompletedTask2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCompletedTask2";
  } else {
    func.displayName = `PlasmicCompletedTask2.${nodeName}`;
  }
  return func;
}

export const PlasmicCompletedTask2 = Object.assign(
  // Top-level PlasmicCompletedTask2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    box: makeNodeComponent("box"),
    // Metadata about props expected for PlasmicCompletedTask2
    internalVariantProps: PlasmicCompletedTask2__VariantProps,
    internalArgProps: PlasmicCompletedTask2__ArgProps
  }
);

export default PlasmicCompletedTask2;
/* prettier-ignore-end */
