// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fiUhXe8Zsj5ebqGZX94BP2
// Component: gYHsV3dYRQcR2F
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_play_plasmic_levels_start_here.module.css"; // plasmic-import: fiUhXe8Zsj5ebqGZX94BP2/projectcss
import * as sty from "./PlasmicWorkspace.module.css"; // plasmic-import: gYHsV3dYRQcR2F/css

export const PlasmicWorkspace__VariantProps = new Array();

export const PlasmicWorkspace__ArgProps = new Array("children");

function PlasmicWorkspace__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        className={classNames(
          defaultcss.all,
          defaultcss.__wab_text,
          sty.box__u52RL
        )}
      >
        {"Objective:"}
      </div>

      <div className={classNames(defaultcss.all, sty.box__nfheH)}>
        <p.PlasmicSlot
          defaultContents={
            <div className={classNames(defaultcss.all, sty.box__ubNd)} />
          }
          value={args.children}
        />
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicWorkspace__ArgProps,
      internalVariantPropNames: PlasmicWorkspace__VariantProps
    });

    return PlasmicWorkspace__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicWorkspace";
  } else {
    func.displayName = `PlasmicWorkspace.${nodeName}`;
  }
  return func;
}

export const PlasmicWorkspace = Object.assign(
  // Top-level PlasmicWorkspace renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicWorkspace
    internalVariantProps: PlasmicWorkspace__VariantProps,
    internalArgProps: PlasmicWorkspace__ArgProps
  }
);

export default PlasmicWorkspace;
/* prettier-ignore-end */
