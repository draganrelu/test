// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fiUhXe8Zsj5ebqGZX94BP2
// Component: l2dAb9PJtat-7
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Footer from "../../Footer"; // plasmic-import: R8BdvM5TJ4CRD2/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_play_plasmic_levels_start_here.module.css"; // plasmic-import: fiUhXe8Zsj5ebqGZX94BP2/projectcss
import * as sty from "./PlasmicLevel.module.css"; // plasmic-import: l2dAb9PJtat-7/css

export const PlasmicLevel__VariantProps = new Array(
  "variations",
  "showMaxLevels",
  "rightSide",
  "basics"
);

export const PlasmicLevel__ArgProps = new Array(
  "children",
  "number",
  "title",
  "right"
);

function PlasmicLevel__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__variations_footerOnly]: hasVariant(
          variants,
          "variations",
          "footerOnly"
        ),

        [sty.root__variations_noFooter]: hasVariant(
          variants,
          "variations",
          "noFooter"
        )
      })}
    >
      <div
        className={classNames(defaultcss.all, sty.box__bd4CU, {
          [sty.box__variations_noFooter__bd4CUPdOjz]: hasVariant(
            variants,
            "variations",
            "noFooter"
          )
        })}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.box__flE24, {
            [sty.box__basics__flE245NmJa]: hasVariant(
              variants,
              "basics",
              "basics"
            )
          })}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.box__pyxuy, {
              [sty.box__rightSide__pyxuYlvg7X]: hasVariant(
                variants,
                "rightSide",
                "rightSide"
              ),

              [sty.box__showMaxLevels__pyxuYgb3Lf]: hasVariant(
                variants,
                "showMaxLevels",
                "showMaxLevels"
              ),

              [sty.box__variations_noFooter__pyxuyPdOjz]: hasVariant(
                variants,
                "variations",
                "noFooter"
              )
            })}
          >
            <div
              className={classNames(defaultcss.all, sty.box__yexs1, {
                [sty.box__rightSide__yexs1Lvg7X]: hasVariant(
                  variants,
                  "rightSide",
                  "rightSide"
                ),

                [sty.box__showMaxLevels__yexs1Gb3Lf]: hasVariant(
                  variants,
                  "showMaxLevels",
                  "showMaxLevels"
                )
              })}
            >
              {(hasVariant(variants, "basics", "basics") ? false : true) ? (
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box__fmEo,
                    {
                      [sty.box__basics__fmEo5NmJa]: hasVariant(
                        variants,
                        "basics",
                        "basics"
                      ),

                      [sty.box__showMaxLevels__fmEoGb3Lf]: hasVariant(
                        variants,
                        "showMaxLevels",
                        "showMaxLevels"
                      )
                    }
                  )}
                >
                  {"Advanced "}
                </div>
              ) : null}
              {(
                hasVariant(variants, "variations", "footerOnly") ? false : true
              ) ? (
                <p.PlasmicSlot
                  defaultContents={"Level 1"}
                  value={args.number}
                  className={classNames(sty.slotNumber, {
                    [sty.slotNumber__variations_footerOnly]: hasVariant(
                      variants,
                      "variations",
                      "footerOnly"
                    )
                  })}
                />
              ) : null}
              {(
                hasVariant(variants, "showMaxLevels", "showMaxLevels")
                  ? true
                  : false
              ) ? (
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box__my2GQ,
                    {
                      [sty.box__showMaxLevels__my2GQgb3Lf]: hasVariant(
                        variants,
                        "showMaxLevels",
                        "showMaxLevels"
                      )
                    }
                  )}
                >
                  {" of 7"}
                </div>
              ) : null}
            </div>

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.box__qz3YU)}
            >
              {(
                hasVariant(variants, "variations", "footerOnly") ? false : true
              ) ? (
                <p.PlasmicSlot
                  defaultContents={"Draw a box."}
                  value={args.title}
                  className={classNames(sty.slotTitle, {
                    [sty.slotTitle__variations_footerOnly]: hasVariant(
                      variants,
                      "variations",
                      "footerOnly"
                    )
                  })}
                />
              ) : null}
            </p.Stack>

            <p.PlasmicSlot
              defaultContents={
                <React.Fragment>
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__x49Iz
                    )}
                  >
                    {
                      "Press r to enter rectangle drawing mode. Drag to try drawing the given shape."
                    }
                  </div>

                  <div className={classNames(defaultcss.all, sty.box__p8MeF)}>
                    <div
                      className={classNames(defaultcss.all, sty.box__jydkk)}
                    />
                  </div>

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__uudTw
                    )}
                  >
                    {"Tip: hold shift while dragging to draw a perfect square."}
                  </div>
                </React.Fragment>
              }
              value={args.children}
            />
          </p.Stack>

          {(hasVariant(variants, "rightSide", "rightSide") ? true : false) ? (
            <div
              className={classNames(defaultcss.all, sty.box__ollqI, {
                [sty.box__rightSide__ollqIlvg7X]: hasVariant(
                  variants,
                  "rightSide",
                  "rightSide"
                )
              })}
            >
              <p.PlasmicSlot defaultContents={null} value={args.right} />
            </div>
          ) : null}
        </p.Stack>

        {(hasVariant(variants, "variations", "noFooter") ? false : true) ? (
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer, {
              [sty.footer__variations_noFooter]: hasVariant(
                variants,
                "variations",
                "noFooter"
              )
            })}
          />
        ) : null}
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "footer"],
  footer: ["footer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicLevel__ArgProps,
      internalVariantPropNames: PlasmicLevel__VariantProps
    });

    return PlasmicLevel__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLevel";
  } else {
    func.displayName = `PlasmicLevel.${nodeName}`;
  }
  return func;
}

export const PlasmicLevel = Object.assign(
  // Top-level PlasmicLevel renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    footer: makeNodeComponent("footer"),
    // Metadata about props expected for PlasmicLevel
    internalVariantProps: PlasmicLevel__VariantProps,
    internalArgProps: PlasmicLevel__ArgProps
  }
);

export default PlasmicLevel;
/* prettier-ignore-end */
