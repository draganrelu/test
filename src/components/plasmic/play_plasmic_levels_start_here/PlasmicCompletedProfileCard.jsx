// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fiUhXe8Zsj5ebqGZX94BP2
// Component: -i7oK4OSoEqa5A
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_play_plasmic_levels_start_here.module.css"; // plasmic-import: fiUhXe8Zsj5ebqGZX94BP2/projectcss
import * as sty from "./PlasmicCompletedProfileCard.module.css"; // plasmic-import: -i7oK4OSoEqa5A/css
import image115Ys3I8AdEmYCbp from "./images/image11.png"; // plasmic-import: 5ys3i8ADEmYCbp/picture

export const PlasmicCompletedProfileCard__VariantProps = new Array();

export const PlasmicCompletedProfileCard__ArgProps = new Array(
  "name",
  "username",
  "profilePicture"
);

function PlasmicCompletedProfileCard__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.PlasmicSlot
        defaultContents={
          <img
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(defaultcss.img, sty.img)}
            role={"img"}
            src={image115Ys3I8AdEmYCbp}
          />
        }
        value={args.profilePicture}
      />

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.box__a8Fth)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.box__suBko)}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.box__ekzbn)}
          >
            <p.PlasmicSlot
              defaultContents={"Totoro"}
              value={args.name}
              className={classNames(sty.slotName)}
            />
          </p.Stack>
        </p.Stack>

        <p.PlasmicSlot
          defaultContents={"@friendlyneighbor"}
          value={args.username}
          className={classNames(sty.slotUsername)}
        />
      </p.Stack>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "img"],
  img: ["img"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCompletedProfileCard__ArgProps,
      internalVariantPropNames: PlasmicCompletedProfileCard__VariantProps
    });

    return PlasmicCompletedProfileCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCompletedProfileCard";
  } else {
    func.displayName = `PlasmicCompletedProfileCard.${nodeName}`;
  }
  return func;
}

export const PlasmicCompletedProfileCard = Object.assign(
  // Top-level PlasmicCompletedProfileCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicCompletedProfileCard
    internalVariantProps: PlasmicCompletedProfileCard__VariantProps,
    internalArgProps: PlasmicCompletedProfileCard__ArgProps
  }
);

export default PlasmicCompletedProfileCard;
/* prettier-ignore-end */
