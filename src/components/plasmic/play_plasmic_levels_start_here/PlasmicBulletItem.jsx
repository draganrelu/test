// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fiUhXe8Zsj5ebqGZX94BP2
// Component: IYDGxHcqfIqWTh
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Bullet from "../../Bullet"; // plasmic-import: GGryJSzOd33Izh/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_play_plasmic_levels_start_here.module.css"; // plasmic-import: fiUhXe8Zsj5ebqGZX94BP2/projectcss
import * as sty from "./PlasmicBulletItem.module.css"; // plasmic-import: IYDGxHcqfIqWTh/css

export const PlasmicBulletItem__VariantProps = new Array();

export const PlasmicBulletItem__ArgProps = new Array("children", "slot");

function PlasmicBulletItem__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <Bullet
        data-plasmic-name={"bullet"}
        data-plasmic-override={overrides.bullet}
        className={classNames("__wab_instance", sty.bullet)}
      >
        <p.PlasmicSlot defaultContents={"â€¢"} value={args.slot} />
      </Bullet>

      <div className={classNames(defaultcss.all, sty.box___8Ro6U)}>
        <div className={classNames(defaultcss.all, sty.box__ho8YT)}>
          <p.PlasmicSlot
            defaultContents={
              "You can always press Cmd+Z to undo if you mess up."
            }
            value={args.children}
            className={classNames(sty.slotChildren)}
          />
        </div>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "bullet"],
  bullet: ["bullet"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicBulletItem__ArgProps,
      internalVariantPropNames: PlasmicBulletItem__VariantProps
    });

    return PlasmicBulletItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBulletItem";
  } else {
    func.displayName = `PlasmicBulletItem.${nodeName}`;
  }
  return func;
}

export const PlasmicBulletItem = Object.assign(
  // Top-level PlasmicBulletItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    bullet: makeNodeComponent("bullet"),
    // Metadata about props expected for PlasmicBulletItem
    internalVariantProps: PlasmicBulletItem__VariantProps,
    internalArgProps: PlasmicBulletItem__ArgProps
  }
);

export default PlasmicBulletItem;
/* prettier-ignore-end */
