// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fiUhXe8Zsj5ebqGZX94BP2
// Component: I7cLGI410FMII1
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_play_plasmic_levels_start_here.module.css"; // plasmic-import: fiUhXe8Zsj5ebqGZX94BP2/projectcss
import * as sty from "./PlasmicCompletedTask.module.css"; // plasmic-import: I7cLGI410FMII1/css

export const PlasmicCompletedTask__VariantProps = new Array();

export const PlasmicCompletedTask__ArgProps = new Array();

function PlasmicCompletedTask__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div className={classNames(defaultcss.all, sty.box__wcX9K)} />

      <div
        className={classNames(
          defaultcss.all,
          defaultcss.__wab_text,
          sty.box__uELj
        )}
      >
        {"Request application extension"}
      </div>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCompletedTask__ArgProps,
      internalVariantPropNames: PlasmicCompletedTask__VariantProps
    });

    return PlasmicCompletedTask__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCompletedTask";
  } else {
    func.displayName = `PlasmicCompletedTask.${nodeName}`;
  }
  return func;
}

export const PlasmicCompletedTask = Object.assign(
  // Top-level PlasmicCompletedTask renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicCompletedTask
    internalVariantProps: PlasmicCompletedTask__VariantProps,
    internalArgProps: PlasmicCompletedTask__ArgProps
  }
);

export default PlasmicCompletedTask;
/* prettier-ignore-end */
