// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fiUhXe8Zsj5ebqGZX94BP2
// Component: VIrrvOuHwKpPSQ
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_play_plasmic_levels_start_here.module.css"; // plasmic-import: fiUhXe8Zsj5ebqGZX94BP2/projectcss
import * as sty from "./PlasmicCompletedRating.module.css"; // plasmic-import: VIrrvOuHwKpPSQ/css
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: En2OdkbH6qwvE6/icon

export const PlasmicCompletedRating__VariantProps = new Array();

export const PlasmicCompletedRating__ArgProps = new Array();

function PlasmicCompletedRating__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <Icon10Icon
        className={classNames(defaultcss.all, sty.svg__lTB)}
        role={"img"}
      />

      <Icon10Icon
        className={classNames(defaultcss.all, sty.svg__tNybS)}
        role={"img"}
      />

      <Icon10Icon
        className={classNames(defaultcss.all, sty.svg__uFTk)}
        role={"img"}
      />

      <Icon10Icon
        className={classNames(defaultcss.all, sty.svg__vKfgn)}
        role={"img"}
      />

      <Icon10Icon
        className={classNames(defaultcss.all, sty.svg__zoCJj)}
        role={"img"}
      />
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCompletedRating__ArgProps,
      internalVariantPropNames: PlasmicCompletedRating__VariantProps
    });

    return PlasmicCompletedRating__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCompletedRating";
  } else {
    func.displayName = `PlasmicCompletedRating.${nodeName}`;
  }
  return func;
}

export const PlasmicCompletedRating = Object.assign(
  // Top-level PlasmicCompletedRating renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicCompletedRating
    internalVariantProps: PlasmicCompletedRating__VariantProps,
    internalArgProps: PlasmicCompletedRating__ArgProps
  }
);

export default PlasmicCompletedRating;
/* prettier-ignore-end */
