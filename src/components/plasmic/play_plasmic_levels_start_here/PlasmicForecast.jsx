// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fiUhXe8Zsj5ebqGZX94BP2
// Component: TVy4Zilk6i8OBz
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_play_plasmic_levels_start_here.module.css"; // plasmic-import: fiUhXe8Zsj5ebqGZX94BP2/projectcss
import * as sty from "./PlasmicForecast.module.css"; // plasmic-import: TVy4Zilk6i8OBz/css

export const PlasmicForecast__VariantProps = new Array("variants");

export const PlasmicForecast__ArgProps = new Array("children");

function PlasmicForecast__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__variants_row]: hasVariant(variants, "variants", "row")
      })}
    >
      <div
        className={classNames(defaultcss.all, sty.box__th1Gw, {
          [sty.box__variants_row__th1Gw1Rn5I]: hasVariant(
            variants,
            "variants",
            "row"
          )
        })}
      >
        <p.PlasmicSlot defaultContents={"Wednesday"} value={args.children} />
      </div>

      <img
        data-plasmic-name={"img"}
        data-plasmic-override={overrides.img}
        alt={""}
        className={classNames(defaultcss.img, sty.img, {
          [sty.img__variants_row]: hasVariant(variants, "variants", "row")
        })}
        role={"img"}
      />

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.box___1URKw, {
          [sty.box__variants_row___1URKw1Rn5I]: hasVariant(
            variants,
            "variants",
            "row"
          )
        })}
      >
        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.box___67CW3,
            {
              [sty.box__variants_row___67CW31Rn5I]: hasVariant(
                variants,
                "variants",
                "row"
              )
            }
          )}
        >
          {"68°"}
        </div>

        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.box__p687G,
            {
              [sty.box__variants_row__p687G1Rn5I]: hasVariant(
                variants,
                "variants",
                "row"
              )
            }
          )}
        >
          {"36°"}
        </div>
      </p.Stack>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.box__cf60W, {
          [sty.box__variants_row__cf60W1Rn5I]: hasVariant(
            variants,
            "variants",
            "row"
          )
        })}
      >
        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.box__znPzD,
            {
              [sty.box__variants_row__znPzD1Rn5I]: hasVariant(
                variants,
                "variants",
                "row"
              )
            }
          )}
        >
          {"Pollen"}
        </div>

        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.box__ikRJk,
            {
              [sty.box__variants_row__ikRJk1Rn5I]: hasVariant(
                variants,
                "variants",
                "row"
              )
            }
          )}
        >
          {"35"}
        </div>
      </p.Stack>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "img"],
  img: ["img"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicForecast__ArgProps,
      internalVariantPropNames: PlasmicForecast__VariantProps
    });

    return PlasmicForecast__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicForecast";
  } else {
    func.displayName = `PlasmicForecast.${nodeName}`;
  }
  return func;
}

export const PlasmicForecast = Object.assign(
  // Top-level PlasmicForecast renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicForecast
    internalVariantProps: PlasmicForecast__VariantProps,
    internalArgProps: PlasmicForecast__ArgProps
  }
);

export default PlasmicForecast;
/* prettier-ignore-end */
