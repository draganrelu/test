// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fiUhXe8Zsj5ebqGZX94BP2
// Component: 9b-8ocnsuNcwQN
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_play_plasmic_levels_start_here.module.css"; // plasmic-import: fiUhXe8Zsj5ebqGZX94BP2/projectcss
import * as sty from "./PlasmicCompletedLandmarks.module.css"; // plasmic-import: 9b-8ocnsuNcwQN/css
import Icon12Icon from "./icons/PlasmicIcon__Icon12"; // plasmic-import: sWIQcgAmyUL4qh/icon

export const PlasmicCompletedLandmarks__VariantProps = new Array("variants");

export const PlasmicCompletedLandmarks__ArgProps = new Array();

function PlasmicCompletedLandmarks__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__variants_wide]: hasVariant(variants, "variants", "wide")
      })}
    >
      <div
        className={classNames(
          defaultcss.all,
          defaultcss.__wab_text,
          sty.box__ytZYq,
          {
            [sty.box__variants_wide__ytZYqv4PY7]: hasVariant(
              variants,
              "variants",
              "wide"
            )
          }
        )}
      >
        {"Landmarks"}
      </div>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.box__irbcw, {
          [sty.box__variants_wide__irbcwv4PY7]: hasVariant(
            variants,
            "variants",
            "wide"
          )
        })}
      >
        <div
          className={classNames(defaultcss.all, sty.box__jln1W, {
            [sty.box__variants_wide__jln1Wv4PY7]: hasVariant(
              variants,
              "variants",
              "wide"
            )
          })}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__v0Bs7
            )}
          >
            {"Mission Dolores Park"}
          </div>

          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__cjXiE
            )}
          >
            {"Park"}
          </div>

          <Icon12Icon
            className={classNames(defaultcss.all, sty.svg__aHmiX)}
            role={"img"}
          />
        </div>

        <div
          className={classNames(defaultcss.all, sty.box___4JWvm, {
            [sty.box__variants_wide___4JWvMv4PY7]: hasVariant(
              variants,
              "variants",
              "wide"
            )
          })}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__wyC7L,
              {
                [sty.box__variants_wide__wyC7Lv4PY7]: hasVariant(
                  variants,
                  "variants",
                  "wide"
                )
              }
            )}
          >
            {"Mission Dolores Park"}
          </div>

          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__gxCcH
            )}
          >
            {"Park"}
          </div>

          <Icon12Icon
            className={classNames(defaultcss.all, sty.svg__db9Ji)}
            role={"img"}
          />
        </div>

        <div
          className={classNames(defaultcss.all, sty.box___7KFgP, {
            [sty.box__variants_wide___7KFgPv4PY7]: hasVariant(
              variants,
              "variants",
              "wide"
            )
          })}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__w5G48
            )}
          >
            {"Mission Dolores Park"}
          </div>

          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__cQd1T
            )}
          >
            {"Park"}
          </div>

          <Icon12Icon
            className={classNames(defaultcss.all, sty.svg__h2IvH)}
            role={"img"}
          />
        </div>
      </p.Stack>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCompletedLandmarks__ArgProps,
      internalVariantPropNames: PlasmicCompletedLandmarks__VariantProps
    });

    return PlasmicCompletedLandmarks__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCompletedLandmarks";
  } else {
    func.displayName = `PlasmicCompletedLandmarks.${nodeName}`;
  }
  return func;
}

export const PlasmicCompletedLandmarks = Object.assign(
  // Top-level PlasmicCompletedLandmarks renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicCompletedLandmarks
    internalVariantProps: PlasmicCompletedLandmarks__VariantProps,
    internalArgProps: PlasmicCompletedLandmarks__ArgProps
  }
);

export default PlasmicCompletedLandmarks;
/* prettier-ignore-end */
